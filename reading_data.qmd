---
title: "Reading data"
format: html
editor: visual
---

## Reading a 'csv' file

```{r}
library(readr)
air_quality<-read.csv("https://www4.stat.ncsu.edu/~online/datasets/AirQuality.csv")
```

## Reading in a Fixed width Field (FwF) file

```{r}
read_fwf(
  "https://www4.stat.ncsu.edu/~online/datasets/cigarettes.txt",
         fwf_widths(c(17,5,9,7,4),
                    c("brand","tar","nicotine","weight","co")),
  skip=1)
```

## Reading in an excel file

```{r}
library(readxl)
#dry_bean_data <- readxl::read_excel("https://www4.stat.ncsu.edu/~online/datasets/Dry_Bean_Dataset.xlsx")
#dry_bean_data
```


```{r}
library(readxl)
library(httr)

# Specify the URL of the file
url <- "https://www4.stat.ncsu.edu/~online/datasets/Dry_Bean_Dataset.xlsx"

# Download the file to a temporary location
temp_file <- tempfile(fileext = ".xlsx")
GET(url, write_disk(temp_file, overwrite = TRUE))

# Read the downloaded file
dry_bean_data <- read_excel(temp_file)
dry_bean_data

```

```{r}
excel_sheets(temp_file)
```

```{r}
citation_dry_bean_data <- read_excel(temp_file, 
                            sheet = excel_sheets(temp_file)[2],
                            col_names = F)
citation_dry_bean_data

cat(dplyr::pull(citation_dry_bean_data, 1))
```
## Manipulate air quality data to clean it up

```{r}
air_quality |>
  select(-starts_with("...")) |>
  rename("co_gt" = CO.GT.) |>
  filter(co_gt != -200) |>
  mutate(mean_co_gt = mean(co_gt, na.rm = TRUE))


```

same for all numeric

```{r}
air_quality |>
  select(-starts_with("...")) |>
  rename("co_gt" = CO.GT.) |>
  filter(co_gt != -200) |>
  mutate(across(where(is.numeric),
                list(mean=mean,sd=sd),
                .names = "{.col}_{.fn}"))

```


Adding grouping variable


```{r}
air_quality |>
  select(-starts_with("...")) |>
  rename("co_gt" = CO.GT.) |>
  filter(co_gt != -200) |>
  group_by(Date) |>
  mutate(across(where(is.numeric),
                list(mean=mean,sd=sd),
                .names = "{.col}_{.fn}"))

```


## connecting to db

```{r}
library(RSQLite)
library(DBI)
con <- dbConnect(RSQLite::SQLite(), "lahman.db")

dbListTables(con)
library(dplyr)
tbl(con, "Pitching")
```

```{r}
tbl(con, "Pitching") |>
  select(ends_with("ID")) |>
  filter(yearID == 2010) 
```

```{r}
tbl(con, "Pitching") |>
  select(ends_with("ID")) |>
  filter(yearID == 2010) |>
  collect()
```

```{r}
tbl(con, "Pitching") |>
  select(ends_with("ID")) |>
  filter(yearID == 2010) |>
  show_query()
```

```{r}
dbDisconnect(con)
```


## Connect to db from a Video

```{r}
library(bigrquery)
library(DBI)
library(tidyverse)
library(RSQLite)

#con <- dbConnect(
#  bigrquery::bigquery(
#    project = "bigquery-public-data",
#    dataset = "google_trends",
#    billing = "st-558-424715"
#  )
#)

#dbListTables(con)

#my_data <- tbl(con, "top_terms") |>
#  select(refresh_date, term, rank, dma_id, dma_name) |>
#  rename("Day"="refresh_date",
#         "Top_term"="term")|>
#  filter(rank==1,
#         Day > lubridate::as_date("2024-05-14"),
#         dma_id == 500) |>
#  collect()
  
```

## Joins

```{r}
library(RSQLite)
library(DBI)
library(dplyr)

con <- dbConnect(RSQLite::SQLite(), "lahman.db")
dbListTables(con)

inner_join(tbl(con,"Batting")|>filter(yearID==2000),tbl(con,"Pitching")|>filter(yearID==2000),by=join_by(playerID==playerID, stint==stint,teamID==teamID,lgID==lgID))|>
  collect()


```